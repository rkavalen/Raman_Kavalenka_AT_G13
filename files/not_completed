`0. фоновое задание - вникнуть в ответ на вопрос, зачем в POJO классах переопределять методы hashCode(), equals() и toString()

отныне каждую домашку комитаем в гит:
a. для каждого задания создаем отдельную ветку с названием по маске hometask_day2_cycletask (day2 и homework.day1.cycletask меняем соответственно)
-- комитаем все в эту ветку
-- каждое под-задание (или его часть, сделанная за день) должен быть в виде отдельного комита
-- комиты можно пушать на гитхаб по мере их появления, но не реже 1 раза в день
b. на каждое задание должен быть пулл-реквест из рабочей ветки в мастер и споследующим мержем (более подробную инструкцию вышлю ниже)
 когда задание и все его под-задания выполнены, все комиты из рабочей ветки нужно запушать на github
-- на сайте github-а делаем пулл-реквест, и сами мержим в main, удаляем рабочую ветку, подтягиваем изменения main себе на компьютер (т.к. каждый раз нужно создавать новую рабочую ветку)
-- каждый день должно быть комитнутое задание или его часть на гит-хабе
вторая часть задания - пописать кода:

работа с массивами и консолью (делаете в 1-м классе, имя класса произвольное)
-- написать метод, который принимает на вход целочисленный массив и считает сумму каждого n-ого элемента в нем, где n - целое число, передаваемое в сигнатуру этого метода вторым аргументом
-- написать метод, который вернет целочисленный массив, состоящий только из тех элементов исходного целочисленного массива (подается на вход этого метода), которые больше, чем число n, где n - целое число, передаваемое в сигнатуру этого метода вторым аргументом, элементы в результирующем массиве должны быть расположены в обратном порядке
-- написать метод, который вернет сумму тех элементов целочисленного массива, которые кратны первой цифре длины этого массива (массив подается в сигнатуру метода)
-- написать метод, который "нарисует" в консоли следующий рисунок:
      ^__^
      (oo)\\_______
     (__)\ ) \/\  \
          ||----w |\
          ||     ||

(и не мудрите, это простая последовательность из .println())
















Playground task (
пункты делаем ТОЛЬКО в том порядке, в котором они перечислены,
каждый Task делаем в отдельной ветке и мержим через PR)

Playground Task 2:
добавить в классы характеристики и возможности:
-- у материи должно быть protected поле веса, int mass, конструктор, соответствующие геттеры и сеттеры
-- у животных, растений, транспортных стредств и емкостей должно быть protected поле имени, String name, конструктор, соответствующие геттеры и сеттеры
-- все животные имеют не абстрактный публичный метод void eat(Plant food) - принимает обьект растения и печатает в консоль фразу "I am N and I am eating D", где N - имя соответствующего обьекта класса животного, D - имя обьекта растения из передаваемого аргумента, использовать Format string syntax
-- все позвоночные имеют не абстрактный публичный метод void eat(Insect food) - принимает обьект насекомого и печатает в консоль фразу "I am N and I am eating D", где N - имя соответствующего обьекта класса позвоночного, D - имя обьекта насекомого из передаваемого аргумента, использовать Format string syntax
-- у жука есть не абстрактный публичный метод void nest(Carrot home) - принимает обьект морковки, сравнивает свою массу с массой последней и если его масса меньше, то печатает в консоль фразу "I am N and I will nest there with D my family members!", где N - имя соответствующего обьекта класса жука, D -  целая чать от деления массы моркови на массу жука, в противном случае печатает в консоль фразу "This carrot is too small for nesting :(", использовать, Format string syntax




Playground Task 3:
создать интерфейсы (которые реализуются соответствующими классами, согласно перечислению):
package playground.essence
летающие (Flyable): воздушные транспортные стредства, комар, муха
package playground.essence.craft
перемещающие (Transportable): воздушные транспортные стредства, наземные транспортные стредства
ездящие (Rideable): наземные транспортные стредства
package playground.essence.creatures;
ползающие (Crawlable): жук, крокодил
package playground.essence.craft.hand
хранящие (Storable): бутылка, банка
package playground.essence.material
льющиеся (Pourable): бензин, дизельное топливо, вода
питающие (Powerable): бензин, дизельное топливо
